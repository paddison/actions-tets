name: Rust

on: 
  workflow_dispatch:
  push:
    paths:
      - '**.rs'
      - '**.toml'
      - '**.lock'
      - '**.yml'
  
env:
  TF_VAR_TABLE_NAME: "cloud-wave-file" 
  TF_VAR_GLOBAL_INDEX: "cloud-date-time-index"
  TF_VAR_BUCKET_NAME: "cloud-wave-file-bucket"
  TF_VAR_GENERATOR_LAMBDA: "cloud-sine-generator"
  TF_VAR_CLEANER_LAMBDA: "cloud-bucket-cleaner"
  TF_VAR_MAIN_LAMBDA: "cloud-main"

jobs:

  checkout-repository:

    runs-on: self-hosted
    steps:
      - name: print event info
        run: echo '${{ toJSON(github.event) }}'
        
      - name: Checkout Repo
        uses: actions/checkout@v3

  build-cache-and-lambda:
    runs-on: self-hosted
    needs: checkout-repository

    steps:
      - name: Try Cache
        uses: actions/cache@v3
        env:
          cache-name: cache-rust-deps
        with:
          path: ./target
          key: build-${{ env.cache-name }}-${{ hashFiles('Cargo.lock')}}
          restore-keys: |
            build-${{ env.cache-name }}

      - name: Build Lambdas
        run: cargo lambda build --release --output-format Zip
      
  upload-artifacts:
    env:
      BIN_PATH: "target/lambda"
      BIN_NAME: "bootstrap.zip"
      
    needs: build-cache-and-lambda
    runs-on: self-hosted
    
    steps:
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: lambda-binaries
          path: |
            $BIN_PATH/$TF_VAR_MAIN_LAMBDA/$BIN_NAME
            $BIN_PATH/$TF_VAR_CLEANER_LAMBDA/$BIN_NAME
            $BIN_PATH/$TF_VAR_GENERATOR_LAMBDA/$BIN_NAME
  
  download-artifacts:
    runs-on: self-hosted
    needs: upload-artifacts
    steps:
    - name: Download Artifacts
      uses: actions/download-artifact@v3 # not specifying which artifact downloads all artifacts
    - name: List directory
      run: ls -R
